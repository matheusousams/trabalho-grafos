#testes de grafo

grafo = Digrafo()

grafo.inserirArestas(1,2)
grafo.inserirArestas(2,3,7)
grafo.inserirArestas(3,4)
grafo.inserirArestas(4,5)
grafo.inserirArestas(5,6)
grafo.inserirArestas(6,7)
grafo.inserirArestas(7,8)
grafo.inserirArestas(8,9)
grafo.inserirArestas(10,11)

print("numero de vértices")
print(grafo.numeroDeVertices())
print("numero de arestas")
print(grafo.numeroDeArestas())
print("vertices adjacentes e grau do vertice 1")
print(grafo.verticesAdjacentes(1))
print(grafo.grauDoVertice(1))
print("vertices adjacentes e grau do vertice 2")
print(grafo.verticesAdjacentes(2))
print(grafo.grauDoVertice(2))
print("vertices adjacentes e grau do vertice 3")
print(grafo.verticesAdjacentes(3))
print(grafo.grauDoVertice(3))
print("vertices adjacentes e grau do vertice 4")
print(grafo.verticesAdjacentes(4))
print(grafo.grauDoVertice(4))
print("vertices adjacentes e grau do vertice 5")
print(grafo.verticesAdjacentes(5))
print(grafo.grauDoVertice(5))
print("vertices adjacentes e grau do vertice 6")
print(grafo.verticesAdjacentes(6))
print(grafo.grauDoVertice(6))
print("peso das arestas")
print(grafo.pesoDaAresta(1,2))
print(grafo.pesoDaAresta(2,3))
print(grafo.pesoDaAresta(3,4))
print(grafo.pesoDaAresta(4,5))
print(grafo.pesoDaAresta(5,6))
print("menor grau")
print(grafo.menorGrau())
print("maior grau")
print(grafo.maiorGrau())
print("busca em largura vertice 1")
d,pi=grafo.buscaEmLargura(1)
print(d,pi)
print("caminho com quantidade maior ou igual a 10")
print(grafo.caminho(1))
print("busca em profundidade vertice 1")
d,pi,ini=grafo.buscaEmProfundidade(1)
print(d,pi,ini)
print("ciclo com mais 5 ou mais arestas")
print(grafo.ciclo(1))

print("vértice mais distante:")
verticeMaisDistante, distancia = grafo.verticeMaisDistante(1)
print(f"O vertice mais distante do vertice 1 é {verticeMaisDistante} com uma distancia de {distancia}")

grafo.inserirArestas(12,12,2)
print(grafo.verticesAdjacentes(12))



print(grafo.numeroDeArestas())